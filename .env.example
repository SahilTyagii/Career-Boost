# ================================
# MongoDB Database Configuration
# ================================

# MongoDB connection string for your database
# This is the connection URL for your MongoDB database instance
# 
# How to get it:
# 1. Create a free MongoDB Atlas account at https://www.mongodb.com/cloud/atlas
# 2. Create a new cluster (free tier available)
# 3. Click "Connect" on your cluster
# 4. Choose "Connect your application"
# 5. Copy the connection string and replace <password> with your database user password
# 6. Replace <dbname> with your desired database name (e.g., "careerboost")
#
# Format: mongodb+srv://<username>:<password>@<cluster>.mongodb.net/<dbname>?retryWrites=true&w=majority
# Example: mongodb+srv://myuser:mypassword@cluster0.xxxxx.mongodb.net/careerboost?retryWrites=true&w=majority
MONGODB_URL=


# ================================
# Clerk Authentication Configuration
# ================================

# Clerk Publishable Key (Public)
# This key is safe to use in client-side code and is used to initialize Clerk
#
# How to get it:
# 1. Sign up for a free Clerk account at https://clerk.com
# 2. Create a new application in the Clerk Dashboard
# 3. Go to "API Keys" in the left sidebar
# 4. Copy the "Publishable key" (starts with pk_test_ or pk_live_)
#
# Note: This key is safe to expose in your frontend code
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=


# Clerk Secret Key (Private)
# This key must be kept secret and should only be used server-side
#
# How to get it:
# 1. In the Clerk Dashboard, go to "API Keys"
# 2. Copy the "Secret key" (starts with sk_test_ or sk_live_)
#
# ⚠️ WARNING: Never commit this key to version control or expose it in client-side code
CLERK_SECRET_KEY=


# Clerk Webhook Secret
# This secret is used to verify webhook requests from Clerk to ensure they are authentic
# Used in: app/api/webhook/clerk/route.ts
#
# How to get it:
# 1. In the Clerk Dashboard, go to "Webhooks" in the left sidebar
# 2. Click "Add Endpoint"
# 3. Enter your webhook URL (e.g., https://yourdomain.com/api/webhook/clerk)
# 4. Subscribe to the following events:
#    - organization.created
#    - organization.updated
#    - organization.deleted
#    - organizationMembership.created
#    - organizationMembership.deleted
#    - organizationInvitation.created
# 5. After creating the endpoint, copy the "Signing Secret" shown on the right side
#
# ⚠️ WARNING: Keep this secret secure - it verifies webhook authenticity
NEXT_CLERK_WEBHOOK_SECRET=


# ================================
# UploadThing Configuration
# ================================

# UploadThing Secret Key
# This key is used for server-side file upload operations
#
# How to get it:
# 1. Sign up for a free account at https://uploadthing.com
# 2. Create a new app in the UploadThing dashboard
# 3. Go to "API Keys" section
# 4. Copy your "Secret Key" (starts with sk_)
#
# ⚠️ WARNING: Keep this key secure - never expose it in client-side code
UPLOADTHING_SECRET=


# UploadThing App ID
# This is your application identifier for UploadThing
#
# How to get it:
# 1. In the UploadThing dashboard, go to "API Keys"
# 2. Copy your "App ID"
#
# Note: This key can be used in client-side code
UPLOADTHING_APP_ID=


# ================================
# Next.js Configuration (Optional)
# ================================

# Base URL for your application (used for webhooks and redirects)
# In development: http://localhost:3000
# In production: https://yourdomain.com
NEXT_PUBLIC_APP_URL=http://localhost:3000


# ================================
# Demo Mode Configuration
# ================================

# Use Hardcoded Values for Demo
# When set to 'true', the application will serve data from mock-data/routes.json
# instead of fetching from the database. Authentication will still work normally.
# This is useful for demos when the backend is not ready or available.
#
# Values: 'true' or 'false' (default: 'false')
# Example: USE_HARDCODED_VALUES=true
USE_HARDCODED_VALUES=false


# ================================
# Additional Notes
# ================================
#
# 1. File Security:
#    - Never commit the actual .env file to version control
#    - The .env file is already in .gitignore
#    - Only commit this .env.example file as a template
#
# 2. Environment-Specific Files:
#    - .env.local - for local development (overrides .env)
#    - .env.development - for development environment
#    - .env.production - for production environment
#
# 3. After Setting Up:
#    - Copy this file to .env.local: cp .env.example .env.local
#    - Fill in all the values with your actual credentials
#    - Restart your development server: npm run dev
#
# 4. Troubleshooting:
#    - If authentication isn't working, verify your Clerk keys
#    - If database connection fails, check your MongoDB URL and IP whitelist
#    - If file uploads fail, verify your UploadThing keys
#    - Make sure to restart the dev server after changing environment variables
